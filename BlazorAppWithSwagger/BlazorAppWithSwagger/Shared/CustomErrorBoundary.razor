@using StackExchange.Exceptional;
@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor httpContextAccessor

@inherits ErrorBoundary
@if (CurrentException is null)
{
    @ChildContent
}
else if (ErrorContent is not null)
{
    @ErrorContent(CurrentException)
}
else
{
    <div style="background-color: yellow; border: 2px dashed black; white-space: pre; font-family: consolas, monospace;">
        <p class="errorUI">Getting error please contact to admin or try again later !</p>
        
        @foreach (var exception in receivedExceptions)
        {
            <div class="received-exception" style="background-color: rgba(255,255,255,0.3); margin: 0.5rem; padding: 0.5rem;">
                @exception.Message
            </div>
        }
    </div>
}

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    List<Exception> receivedExceptions = new();

    protected override Task OnErrorAsync(Exception exception)
    {
        receivedExceptions.Add(exception);

        var currentUrl = string.Empty;
        try
        {
            currentUrl = NavigationManager.Uri;
        }
        catch { }

        exception
            .AddLogData("currentUrl", currentUrl)
            .LogAsync(httpContextAccessor.HttpContext);

        return base.OnErrorAsync(exception);
    }

    protected override void OnParametersSet()
    {
        receivedExceptions.Clear();
        base.OnParametersSet();
    }

    public new void Recover()
    {
        receivedExceptions.Clear();
        base.Recover();
    }
}